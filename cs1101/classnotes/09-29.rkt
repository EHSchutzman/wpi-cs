#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.1.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 62 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
39 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
41 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1 22 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 390 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 176
(
 #"#reader(lib \"htdp-intermediate-reader.ss\" \"lang\")((modname 09-29"
 #") (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t const"
 #"ructor repeating-decimal #f #t none #f ())))"
) 0 0 4 29 1 #"\n"
0 7         181 54           0 0           0 29 0 22 3 1 #"("
0 0 14 3 9 #"positive?"
0 0 2 3 1 #" "
0 0 20 3 2 #"12"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 5 #"gives"
0 0 2 3 1 #" "
0 0 14 3 4 #"true"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 9 #"positive?"
0 0 2 3 1 #" "
0 0 20 3 2 #"-4"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 5 #"gives"
0 0 2 3 1 #" "
0 0 14 3 5 #"false"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 9 #"positive?"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 5 #"gives"
0 0 2 3 1 #" "
0 0 14 3 5 #"false"
0           0 0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 7         463 54           0 0           0 76 0 17 3 54
#";; extract-positives: list-of-number -> list-of-number"
0 0 2 29 1 #"\n"
0 0 17 3 49 #";; ...and produces a list of the positive numbers"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"extract-positives"
0 0 2 3 1 #" "
0 0 14 3 4 #"alon"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 2 3 1 #" "
0 0 14 3 4 #"alon"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 8 #"        "
0 0 22 3 2 #"[("
0 0 14 3 5 #"cons?"
0 0 2 3 1 #" "
0 0 14 3 4 #"alon"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 9 #"positive?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 14 3 4 #"alon"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 29 #"                             "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 14 3 4 #"alon"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"extract-positives"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 2 3 1 #" "
0 0 14 3 4 #"alon"
0 0 22 3 4 #")))]"
0 0 2 29 1 #"\n"
0 0 2 3 28 #"                            "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"extract-positives"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 2 3 1 #" "
0 0 14 3 4 #"alon"
0 0 22 3 7 #"))])]))"
0           0 0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 7         523 54           0 0           0 86 0 17 3 57
#";; short-strings: number list-of-string -> list-of-string"
0 0 2 29 1 #"\n"
0 0 17 3 67
#";; consumes a number and a list of strings and produces the strings"
0 0 2 29 1 #"\n"
0 0 17 3 48 #";; that have a length less than the given number"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"short-strings"
0 0 2 3 1 #" "
0 0 14 3 4 #"anum"
0 0 2 3 1 #" "
0 0 14 3 4 #"alos"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 2 3 1 #" "
0 0 14 3 4 #"alos"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 8 #"        "
0 0 22 3 2 #"[("
0 0 14 3 5 #"cons?"
0 0 2 3 1 #" "
0 0 14 3 4 #"alos"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 1 #"<"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-length"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 14 3 4 #"alos"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 14 3 4 #"anum"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 29 #"                             "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 14 3 4 #"alos"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"short-strings"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 2 3 1 #" "
0 0 14 3 4 #"alos"
0 0 22 3 4 #")))]"
0 0 2 29 1 #"\n"
0 0 2 3 28 #"                            "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"short-strings"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 2 3 1 #" "
0 0 14 3 4 #"alos"
0 0 22 3 7 #"))])]))"
0           0 0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 7         541 54           0 0           0 89 0 17 3 8 #";; BUILT"
0 0 17 3 1 #" "
0 0 17 3 2 #"IN"
0 0 17 3 9 #" FUNCTION"
0 0 2 29 1 #"\n"
0 0 17 3 60
#";; filter: (alpha -> boolean) list-of-alpha -> list-of-alpha"
0 0 2 29 1 #"\n"
0 0 17 3 73
(
 #";; extracts the elements of the list for which the given function is"
 #" true"
) 0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 2 3 1 #" "
0 0 14 3 5 #"keep?"
0 0 2 3 1 #" "
0 0 14 3 4 #"alst"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 2 3 1 #" "
0 0 14 3 4 #"alst"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 8 #"        "
0 0 22 3 2 #"[("
0 0 14 3 5 #"cons?"
0 0 2 3 1 #" "
0 0 14 3 4 #"alst"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 5 #"keep?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 14 3 4 #"alst"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 29 #"                             "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 14 3 4 #"alst"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 2 3 1 #" "
0 0 14 3 5 #"keep?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 2 3 1 #" "
0 0 14 3 4 #"alst"
0 0 22 3 4 #")))]"
0 0 2 29 1 #"\n"
0 0 2 3 28 #"                            "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 14 3 6 #"filter"
0 0 2 3 1 #" "
0 0 14 3 5 #"keep?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 2 3 1 #" "
0 0 14 3 4 #"alst"
0 0 22 3 6 #")])]))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 44 #";; alpha denotes a data type - ANY data type"
0           0 0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 17 3 54 #";; extract-positives: list-of-number -> list-of-number"
0 0 54 29 1 #"\n"
0 0 17 3 49 #";; ...and produces a list of the positive numbers"
0 0 54 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"extract-positives"
0 0 56 3 1 #" "
0 0 14 3 4 #"alon"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 57 3 1 #" "
0 0 14 3 9 #"positive?"
0 0 57 3 1 #" "
0 0 14 3 4 #"alon"
0 0 22 3 2 #"))"
0 0 54 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"HAS"
0 0 17 3 1 #" "
0 0 17 3 2 #"TO"
0 0 17 3 1 #" "
0 0 17 3 2 #"BE"
0 0 17 3 1 #" "
0 0 17 3 1 #"A"
0 0 17 3 1 #" "
0 0 17 3 8 #"FUNCTION"
0 0 17 3 1 #" "
0 0 17 3 4 #"THAT"
0 0 17 3 1 #" "
0 0 17 3 3 #"YOU"
0 0 17 3 1 #" "
0 0 17 3 4 #"PASS"
0 0 17 3 1 #" "
0 0 17 3 2 #"TO"
0 0 17 3 1 #" "
0 0 17 3 6 #"FILTER"
0 0 17 3 27 #", NOT A FUNCTION DEFINITION"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 17 3 15 #";; a dillo is a"
0 0 54 29 1 #"\n"
0 0 17 3 32 #";;   (make-dillo number boolean)"
0 0 54 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 56 3 1 #" "
0 0 14 3 5 #"dillo"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 56 3 1 #" "
0 0 14 3 5 #"dead?"
0 0 22 3 2 #"))"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 17 3 10 #";; example"
0 0 54 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 54 3 1 #" "
0 0 14 3 6 #"DILLOS"
0 0 54 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"make-dillo"
0 0 56 3 1 #" "
0 0 20 3 1 #"4"
0 0 56 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 10 #"make-dillo"
0 0 56 3 1 #" "
0 0 20 3 1 #"4"
0 0 56 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 10 #"make-dillo"
0 0 56 3 1 #" "
0 0 20 3 1 #"6"
0 0 56 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 10 #"make-dillo"
0 0 56 3 1 #" "
0 0 20 3 1 #"6"
0 0 56 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 3 #")))"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 17 3 46 #";; dead-dillos: list-of-dillo -> list-of-dillo"
0 0 54 29 1 #"\n"
0 0 17 3 37 #";; produces a list of the dead dillos"
0 0 54 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"dead-dillos"
0 0 56 3 1 #" "
0 0 14 3 4 #"alod"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 56 3 1 #" "
0 0 14 3 11 #"dillo-dead?"
0 0 56 3 1 #" "
0 0 14 3 4 #"alod"
0 0 22 3 2 #"))"
0 0 54 29 1 #"\n"
0 0 17 3 7 #";; test"
0 0 54 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"dead-dillos"
0 0 56 3 1 #" "
0 0 14 3 6 #"DILLOS"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"make-dillo"
0 0 56 3 1 #" "
0 0 20 3 1 #"4"
0 0 56 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 41 #"                                         "
0 0 22 3 1 #"("
0 0 14 3 10 #"make-dillo"
0 0 56 3 1 #" "
0 0 20 3 1 #"6"
0 0 56 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 3 #")))"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 17 3 46 #";; live-dillos: list-of-dillo -> list-of-dillo"
0 0 54 29 1 #"\n"
0 0 17 3 37 #";; produces a list of the live dillos"
0 0 54 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"live-dillos"
0 0 56 3 1 #" "
0 0 14 3 4 #"alod"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 56 3 1 #" "
0 0 14 3 6 #"alive?"
0 0 56 3 1 #" "
0 0 14 3 4 #"alod"
0 0 22 3 2 #"))"
0 0 54 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"alive?"
0 0 56 3 1 #" "
0 0 14 3 7 #"a-dillo"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"dillo-dead?"
0 0 56 3 1 #" "
0 0 14 3 7 #"a-dillo"
0 0 22 3 3 #")))"
0 0 54 29 1 #"\n"
0 0 17 3 7 #";; test"
0 0 54 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"live-dillos"
0 0 56 3 1 #" "
0 0 14 3 6 #"DILLOS"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"make-dillo"
0 0 56 3 1 #" "
0 0 20 3 1 #"4"
0 0 56 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 41 #"                                         "
0 0 22 3 1 #"("
0 0 14 3 10 #"make-dillo"
0 0 56 3 1 #" "
0 0 20 3 1 #"6"
0 0 56 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 3 #")))"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 17 3 49 #";; short-and-dead: list-of-dillo -> list-of-dillo"
0 0 54 29 1 #"\n"
0 0 17 3 59
#";; produces a list of all dead dillos of length less than 5"
0 0 54 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"short-and-dead"
0 0 56 3 1 #" "
0 0 14 3 4 #"alod"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 56 3 1 #" "
0 0 14 3 21 #"dillo-short-and-dead?"
0 0 56 3 1 #" "
0 0 14 3 4 #"alod"
0 0 22 3 2 #"))"
0 0 54 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"dillo-short-and-dead?"
0 0 56 3 1 #" "
0 0 14 3 7 #"a-dillo"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"dillo-dead?"
0 0 56 3 1 #" "
0 0 14 3 7 #"a-dillo"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"<"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"dillo-length"
0 0 56 3 1 #" "
0 0 14 3 7 #"a-dillo"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #")))"
0 0 54 29 1 #"\n"
0 0 17 3 7 #";; test"
0 0 54 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"short-and-dead"
0 0 56 3 1 #" "
0 0 14 3 6 #"DILLOS"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"make-dillo"
0 0 56 3 1 #" "
0 0 20 3 1 #"4"
0 0 56 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 3 #")))"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 17 3 57 #";; short-strings: number list-of-string -> list-of-string"
0 0 54 29 1 #"\n"
0 0 17 3 67
#";; consumes a number and a list of strings and produces the strings"
0 0 54 29 1 #"\n"
0 0 17 3 48 #";; that have a length less than the given number"
0 0 54 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"short-strings"
0 0 56 3 1 #" "
0 0 14 3 4 #"anum"
0 0 56 3 1 #" "
0 0 14 3 4 #"alos"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 57 3 1 #" "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"short?"
0 0 57 3 1 #" "
0 0 14 3 4 #"astr"
0 0 22 3 1 #")"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"<"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-length"
0 0 57 3 1 #" "
0 0 14 3 4 #"astr"
0 0 22 3 1 #")"
0 0 57 3 1 #" "
0 0 14 3 4 #"anum"
0 0 22 3 3 #"))]"
0 0 57 29 1 #"\n"
0 0 57 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 57 3 1 #" "
0 0 14 3 6 #"short?"
0 0 57 3 1 #" "
0 0 14 3 4 #"alos"
0 0 22 3 3 #")))"
0 0 54 29 1 #"\n"
0 0 17 3 104
(
 #";; can't define short? as an external helper as then it would need t"
 #"wo arguments - a string and a number"
) 0 0 4 29 1 #"\n"
0 0 17 3 98
(
 #";; filter requires that the function passed to it should take JUST a"
 #" string (or whatever datatype)"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 100
(
 #";; IT IS BETTER IF YOU CAN WRITE AN EXTERNAL HELPER INSTEAD OF A LOC"
 #"AL, SINCE WITH A HELPER, YOU CAN"
) 0 0 4 29 1 #"\n"
0 0 17 3 74
(
 #";; WRITE THE CONTRACT AND PURPOSE, AND CAN ALSO TEST THE HELPER SEPA"
 #"RATELY"
) 0           0
