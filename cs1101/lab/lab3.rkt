#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.1.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 71 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 0 1
#"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 39 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 41 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 22 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1           0 3009 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 171
(
 #"#reader(lib \"htdp-advanced-reader.ss\" \"lang\")((modname lab3) (re"
 #"ad-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructo"
 #"r repeating-decimal #t #t none #f ())))"
) 0 0 4 29 1 #"\n"
0 0 17 3 17 #";; Tushar Narayan"
0 0 60 29 1 #"\n"
0 0 17 3 11 #";; tnarayan"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 29 #";; a list-of-number is one of"
0 0 60 29 1 #"\n"
0 0 17 3 10 #";;   empty"
0 0 60 29 1 #"\n"
0 0 17 3 33 #";;   (cons number list-of-number)"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 20 #";;an adc is a struct"
0 0 60 29 1 #"\n"
0 0 17 3 35 #";; (make-adc string list-of-number)"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 58 3 1 #" "
0 0 14 3 3 #"adc"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"processor"
0 0 58 3 1 #" "
0 0 14 3 4 #"bits"
0 0 22 3 2 #"))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 12 #";; Problem 1"
0 0 60 29 1 #"\n"
0 7         601 60           0 0           0 99 0 17 3 41
#";; template for processing list-of-number"
0 0 2 29 1 #"\n"
0 0 17 3 38 #";; lon-func: list-of-number ... -> ..."
0 0 2 29 1 #"\n"
0 0 17 3 6 #";; ..."
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"lon-func"
0 0 2 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 2 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 2 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 2 #"[("
0 0 14 3 5 #"cons?"
0 0 2 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 14 3 3 #"..."
0 0 2 29 1 #"\n"
0 0 2 3 22 #"                      "
0 0 14 3 3 #"..."
0 0 22 3 1 #"("
0 0 14 3 8 #"lon-func"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 2 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 14 3 3 #"..."
0 0 22 3 3 #"]))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 32 #";; template for processing adc's"
0 0 2 29 1 #"\n"
0 0 17 3 24 #";; adc-funct: adc -> ..."
0 0 2 29 1 #"\n"
0 0 17 3 6 #";; ..."
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"adc-func"
0 0 2 3 1 #" "
0 0 14 3 5 #"a-adc"
0 0 2 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"..."
0 0 22 3 1 #"("
0 0 14 3 13 #"adc-processor"
0 0 2 3 1 #" "
0 0 14 3 5 #"a-adc"
0 0 22 3 1 #")"
0 0 14 3 3 #"..."
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 14 3 3 #"..."
0 0 22 3 1 #"("
0 0 14 3 8 #"lon-func"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"adc-bits"
0 0 2 3 1 #" "
0 0 14 3 5 #"a-adc"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 3 #")))"
0           0 0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 12 #";; Problem 2"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 60 3 1 #" "
0 0 14 3 11 #"example-adc"
0 0 60 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 13 #"\"processor 1\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 6 #"))))))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 12 #";; Problem 3"
0 0 60 29 1 #"\n"
0 0 17 3 43 #";; member-counter: list-of-number -> number"
0 0 60 29 1 #"\n"
0 0 17 3 75
(
 #";; consumes a list-of-number and returns the number of members in th"
 #"at list"
) 0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"member-counter"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 58 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #"]"
0 0 58 29 1 #"\n"
0 0 58 3 8 #"        "
0 0 22 3 2 #"[("
0 0 14 3 5 #"cons?"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 58 3 1 #" "
0 0 20 3 1 #"1"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"member-counter"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 6 #")))]))"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; test cases"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"member-counter"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"5"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 4 #"))))"
0 0 58 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"member-counter"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"5"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 3 #")))"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"member-counter"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 36 #";; best-processor: adc adc -> string"
0 0 60 29 1 #"\n"
0 0 17 3 57 #";; consumes two adc's and produces a string representing "
0 0 60 29 1 #"\n"
0 0 17 3 55 #";; the processor whose adc has the most bit resolutions"
0 0 60 29 1 #"\n"
0 0 17 3 56 #";; (more bit resolutions means more members in the list)"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"best-processor"
0 0 58 3 1 #" "
0 0 14 3 4 #"adc1"
0 0 58 3 1 #" "
0 0 14 3 4 #"adc2"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 58 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"member-counter"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"adc-bits"
0 0 58 3 1 #" "
0 0 14 3 4 #"adc1"
0 0 22 3 2 #"))"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"member-counter"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"adc-bits"
0 0 58 3 1 #" "
0 0 14 3 4 #"adc2"
0 0 22 3 3 #")))"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"adc-processor"
0 0 58 3 1 #" "
0 0 14 3 4 #"adc1"
0 0 22 3 2 #")]"
0 0 58 29 1 #"\n"
0 0 58 3 8 #"        "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"member-counter"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"adc-bits"
0 0 58 3 1 #" "
0 0 14 3 4 #"adc2"
0 0 22 3 2 #"))"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"member-counter"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"adc-bits"
0 0 58 3 1 #" "
0 0 14 3 4 #"adc1"
0 0 22 3 3 #")))"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"adc-processor"
0 0 58 3 1 #" "
0 0 14 3 4 #"adc2"
0 0 22 3 2 #")]"
0 0 58 29 1 #"\n"
0 0 58 3 8 #"        "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 58 3 1 #" "
0 0 19 3 19 #"\"equal processors!\""
0 0 22 3 3 #"]))"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; test cases"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"best-processor"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 13 #"\"processor 2\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 5 #")))))"
0 0 58 29 1 #"\n"
0 0 58 3 30 #"                              "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 13 #"\"processor 3\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 5 #")))))"
0 0 58 3 1 #" "
0 0 19 3 13 #"\"processor 2\""
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"best-processor"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 13 #"\"processor 4\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 4 #"))))"
0 0 58 29 1 #"\n"
0 0 58 3 30 #"                              "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 13 #"\"processor 5\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 6 #"))))))"
0 0 58 3 1 #" "
0 0 19 3 13 #"\"processor 5\""
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"best-processor"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 13 #"\"processor 6\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 4 #"))))"
0 0 58 29 1 #"\n"
0 0 58 3 30 #"                              "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 13 #"\"processor 7\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 5 #")))))"
0 0 58 3 1 #" "
0 0 19 3 19 #"\"equal processors!\""
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 12 #";; Problem 4"
0 0 60 29 1 #"\n"
0 0 17 3 41 #";; member-adder: list-of-number -> number"
0 0 60 29 1 #"\n"
0 0 17 3 48 #";; consumes a list-of-number and returns the sum"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"member-adder"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 58 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #"]"
0 0 58 29 1 #"\n"
0 0 58 3 8 #"        "
0 0 22 3 2 #"[("
0 0 14 3 5 #"cons?"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"member-adder"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 6 #")))]))"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; test cases"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"member-adder"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"5"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 4 #"))))"
0 0 58 3 1 #" "
0 0 20 3 2 #"17"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"member-adder"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"5"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 3 #")))"
0 0 58 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"member-adder"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 25 #";; average: adc -> number"
0 0 60 29 1 #"\n"
0 0 17 3 54 #";; consumes an adc and returns average bit-resoulution"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-adc"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 58 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"adc-bits"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-adc"
0 0 22 3 2 #"))"
0 0 58 3 1 #" "
0 0 19 3 32 #"\"division by zero not possible!\""
0 0 22 3 1 #"]"
0 0 58 29 1 #"\n"
0 0 58 3 8 #"        "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"member-adder"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"adc-bits"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-adc"
0 0 22 3 2 #"))"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"member-counter"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"adc-bits"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-adc"
0 0 22 3 6 #")))]))"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; test cases"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorA\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 6 #"))))))"
0 0 58 3 1 #" "
0 0 20 3 3 #"8.5"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorB\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"14"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"7"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"1"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"15"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 6 #"))))))"
0 0 58 3 1 #" "
0 0 20 3 4 #"9.25"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"average"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorB\""
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 2 #"))"
0 0 58 3 1 #" "
0 0 19 3 32 #"\"division by zero not possible!\""
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 12 #";; Problem 5"
0 0 60 29 1 #"\n"
0 0 17 3 48 #";; incrementer: list-of-number -> list-of-number"
0 0 60 29 1 #"\n"
0 0 17 3 66
#";; consumes a list-of-number and adds incrememnts each number by 2"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"incrementer"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 58 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 58 29 1 #"\n"
0 0 58 3 8 #"        "
0 0 22 3 2 #"[("
0 0 14 3 5 #"cons?"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 2 #"))"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"incrementer"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 6 #")))]))"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; test cases"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"incrementer"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"5"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 4 #"))))"
0 0 58 3 1 #" "
0 0 58 29 1 #"\n"
0 0 58 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"7"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 4 #"))))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 26 #";; improve-adc: adc -> adc"
0 0 60 29 1 #"\n"
0 0 17 3 79
(
 #";; consumes an adc and returns the same adc but with every bit incre"
 #"mented by 2"
) 0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"improve-adc"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-adc"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"adc-processor"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-adc"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"incrementer"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"adc-bits"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-adc"
0 0 22 3 4 #"))))"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; test cases"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"improve-adc"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorE\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 6 #"))))))"
0 0 58 29 1 #"\n"
0 0 58 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorE\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"6"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"14"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 6 #"))))))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 12 #";; Problem 6"
0 0 60 29 1 #"\n"
0 0 17 3 61
#";; greatest-resolution-accum: list-of-number number -> number"
0 0 60 29 1 #"\n"
0 0 17 3 72
(
 #";; consumes a list-of-number and returns the greatest number in the "
 #"list"
) 0 0 60 29 1 #"\n"
0 0 17 3 23 #";; using an accumulator"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"greatest-resolution-accum"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 58 3 1 #" "
0 0 14 3 9 #"num-accum"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 58 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 14 3 9 #"num-accum"
0 0 22 3 1 #"]"
0 0 58 29 1 #"\n"
0 0 58 3 8 #"        "
0 0 22 3 2 #"[("
0 0 14 3 5 #"cons?"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 9 #"         "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 58 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 14 3 9 #"num-accum"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"greatest-resolution-accum"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 3 #"))]"
0 0 58 29 1 #"\n"
0 0 58 3 15 #"               "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"greatest-resolution-accum"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 14 3 9 #"num-accum"
0 0 22 3 6 #")])]))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 48 #";; greatest-resolution: list-of-number -> number"
0 0 60 29 1 #"\n"
0 0 17 3 72
(
 #";; consumes a list-of-number and returns the greatest number in the "
 #"list"
) 0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"greatest-resolution"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 25 #"greatest-resolution-accum"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 58 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 51 #";; checker: list-of-number number -> list-of-number"
0 0 60 29 1 #"\n"
0 0 17 3 94
(
 #";; consumes a list-of-number and checks for the new resolution, if n"
 #"eeded then adds it to list"
) 0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"checker"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 58 3 1 #" "
0 0 14 3 7 #"new-res"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 58 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 58 29 1 #"\n"
0 0 58 3 8 #"        "
0 0 22 3 2 #"[("
0 0 14 3 5 #"cons?"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 58 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 58 3 1 #" "
0 0 14 3 7 #"new-res"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"greatest-resolution"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 2 #"))"
0 0 58 3 1 #" "
0 0 58 29 1 #"\n"
0 0 58 3 30 #"                              "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 14 3 7 #"new-res"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 2 #")]"
0 0 58 29 1 #"\n"
0 0 58 3 29 #"                             "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 5 #"])]))"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; test cases"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"checker"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"5"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 3 #")))"
0 0 58 3 1 #" "
0 0 20 3 2 #"11"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 58 29 1 #"\n"
0 0 58 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"11"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"5"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 5 #")))))"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"checker"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"5"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 3 #")))"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 58 29 1 #"\n"
0 0 58 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"5"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 4 #"))))"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"checker"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"5"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 3 #")))"
0 0 58 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 58 29 1 #"\n"
0 0 58 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"5"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 4 #"))))"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"checker"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 29 #";; add-res: adc number -> adc"
0 0 60 29 1 #"\n"
0 0 17 3 74
(
 #";; consumes an adc and a bit-resolution, and produces an adc with th"
 #"e new "
) 0 0 60 29 1 #"\n"
0 0 17 3 86
(
 #";; bit-resolution added to the current list of resolutions unless th"
 #"e adc already has "
) 0 0 60 29 1 #"\n"
0 0 17 3 32 #";; that new resolution or higher"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"add-res"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-adc"
0 0 58 3 1 #" "
0 0 14 3 12 #"a-resolution"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"adc-processor"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-adc"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 7 #"checker"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"adc-bits"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-adc"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 14 3 12 #"a-resolution"
0 0 22 3 3 #")))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; test cases"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"add-res"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorE\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 5 #")))))"
0 0 58 3 1 #" "
0 0 20 3 2 #"11"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorE\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 6 #"))))))"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"add-res"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorF\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 5 #")))))"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorF\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 6 #"))))))"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"add-res"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorG\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 5 #")))))"
0 0 58 3 1 #" "
0 0 20 3 2 #"13"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorG\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"13"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 7 #")))))))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 12 #";; Problem 7"
0 0 60 29 1 #"\n"
0 0 17 3 45 #";; in-list?: number list-of-number -> boolean"
0 0 60 29 1 #"\n"
0 0 17 3 109
(
 #";; consumes a number and a list-of-number and produces true if the n"
 #"umber is in the list, else produces false"
) 0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"in-list?"
0 0 58 3 1 #" "
0 0 14 3 4 #"numb"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 58 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 1 #"]"
0 0 58 29 1 #"\n"
0 0 58 3 8 #"        "
0 0 22 3 2 #"[("
0 0 14 3 5 #"cons?"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 58 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 58 3 1 #" "
0 0 14 3 4 #"numb"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 2 #"))"
0 0 58 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #"]"
0 0 58 29 1 #"\n"
0 0 58 3 29 #"                             "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"in-list?"
0 0 58 3 1 #" "
0 0 14 3 4 #"numb"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 7 #"))])]))"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; test cases"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"in-list?"
0 0 58 3 1 #" "
0 0 20 3 1 #"5"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 5 #")))))"
0 0 58 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"in-list?"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 5 #")))))"
0 0 58 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"in-list?"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 5 #")))))"
0 0 58 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"in-list?"
0 0 58 3 1 #" "
0 0 20 3 2 #"16"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 5 #")))))"
0 0 58 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 74
(
 #";; remove-duplicate-accum: list-of-number list-of-number -> list-of-"
 #"number"
) 0 0 60 29 1 #"\n"
0 0 17 3 104
(
 #";; consumes a list-of-number and an accumulator, and produces the li"
 #"st with the duplicate values removed"
) 0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"remove-duplicate-accum"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 58 3 1 #" "
0 0 14 3 9 #"lon-accum"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 58 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 14 3 9 #"lon-accum"
0 0 22 3 1 #"]"
0 0 58 29 1 #"\n"
0 0 58 3 8 #"        "
0 0 22 3 2 #"[("
0 0 14 3 5 #"cons?"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 58 29 1 #"\n"
0 0 58 3 9 #"         "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 58 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 8 #"in-list?"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 14 3 9 #"lon-accum"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"remove-duplicate-accum"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 14 3 9 #"lon-accum"
0 0 22 3 2 #")]"
0 0 58 29 1 #"\n"
0 0 58 3 15 #"               "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"remove-duplicate-accum"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 14 3 9 #"lon-accum"
0 0 22 3 7 #"))])]))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 68
#";; flip-about-accum: list-of-number list-of-number -> list-of-number"
0 0 60 29 1 #"\n"
0 0 17 3 37 #";; reverses the first list of numbers"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"flip-about"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 58 3 1 #" "
0 0 14 3 9 #"lon-accum"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 58 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 14 3 9 #"lon-accum"
0 0 22 3 1 #"]"
0 0 58 29 1 #"\n"
0 0 58 3 8 #"        "
0 0 22 3 2 #"[("
0 0 14 3 5 #"cons?"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"flip-about"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 14 3 9 #"lon-accum"
0 0 22 3 5 #"))]))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 53 #";; remove-duplicate: list-of-number -> list-of-number"
0 0 60 29 1 #"\n"
0 0 17 3 84
(
 #";; consumes a list-of-number and produces the list with the duplicat"
 #"e values removed"
) 0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"remove-duplicate"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"flip-about"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"remove-duplicate-accum"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 2 #"))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; test cases"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"remove-duplicate"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"1"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 20 3 2 #"35"
0 0 58 3 1 #" "
0 0 20 3 2 #"56"
0 0 22 3 2 #"))"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"1"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 20 3 2 #"35"
0 0 58 3 1 #" "
0 0 20 3 2 #"56"
0 0 22 3 2 #"))"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"remove-duplicate"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"1"
0 0 58 3 1 #" "
0 0 20 3 1 #"1"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 20 3 2 #"35"
0 0 58 3 1 #" "
0 0 20 3 2 #"35"
0 0 58 3 1 #" "
0 0 20 3 2 #"56"
0 0 22 3 2 #"))"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"1"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 20 3 2 #"35"
0 0 58 3 1 #" "
0 0 20 3 2 #"56"
0 0 22 3 2 #"))"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"remove-duplicate"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"1"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 20 3 2 #"35"
0 0 58 3 1 #" "
0 0 20 3 2 #"56"
0 0 58 3 1 #" "
0 0 20 3 2 #"56"
0 0 22 3 2 #"))"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"1"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 20 3 2 #"35"
0 0 58 3 1 #" "
0 0 20 3 2 #"56"
0 0 22 3 2 #"))"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"remove-duplicate"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"1"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 20 3 2 #"35"
0 0 58 3 1 #" "
0 0 20 3 2 #"56"
0 0 22 3 2 #"))"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"1"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 20 3 2 #"35"
0 0 58 3 1 #" "
0 0 20 3 2 #"56"
0 0 22 3 2 #"))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 31 #";; combine-bits: adc adc -> adc"
0 0 60 29 1 #"\n"
0 0 17 3 47 #";; consumes two adc's and produces a single adc"
0 0 60 29 1 #"\n"
0 7         661 60           0 0           0 109 0 14 3 2 #"If"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 3 #"two"
0 0 2 3 1 #" "
0 0 14 3 5 #"input"
0 0 2 3 1 #" "
0 0 14 3 4 #"ADCs"
0 0 2 3 1 #" "
0 0 14 3 4 #"have"
0 0 2 3 1 #" "
0 0 14 3 9 #"different"
0 0 2 3 1 #" "
0 0 14 3 10 #"processors"
0 0 26 3 1 #","
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 8 #"function"
0 0 2 3 1 #" "
0 0 14 3 6 #"should"
0 0 2 3 1 #" "
0 0 14 3 6 #"output"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 14 3 3 #"ADC"
0 0 2 3 1 #" "
0 0 14 3 4 #"that"
0 0 2 3 1 #" "
0 0 14 3 3 #"was"
0 0 2 29 1 #"\n"
0 0 14 3 5 #"input"
0 0 2 3 1 #" "
0 0 14 3 2 #"to"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 9 #"function."
0 0 2 3 2 #"  "
0 0 14 3 9 #"Otherwise"
0 0 26 3 1 #","
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 9 #"processor"
0 0 2 3 1 #" "
0 0 14 3 6 #"should"
0 0 2 3 1 #" "
0 0 14 3 7 #"combine"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 15 #"bit-resolutions"
0 0 2 3 1 #" "
0 0 14 3 2 #"of"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 3 #"two"
0 0 2 3 1 #" "
0 0 14 3 4 #"ADCs"
0 0 2 29 1 #"\n"
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 5 #"order"
0 0 2 3 1 #" "
0 0 14 3 2 #"to"
0 0 2 3 1 #" "
0 0 14 3 7 #"produce"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 4 #"list"
0 0 2 3 1 #" "
0 0 14 3 2 #"of"
0 0 2 3 1 #" "
0 0 14 3 15 #"bit-resolutions"
0 0 2 3 1 #" "
0 0 15 3 3 #"for"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 3 #"new"
0 0 2 3 1 #" "
0 0 14 3 4 #"ADC."
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 14 3 3 #"The"
0 0 2 3 1 #" "
0 0 14 3 3 #"new"
0 0 2 3 1 #" "
0 0 14 3 3 #"ADC"
0 0 2 3 1 #" "
0 0 14 3 6 #"should"
0 0 2 3 1 #" "
0 0 14 3 4 #"have"
0 0 2 3 1 #" "
0 0 14 3 2 #"no"
0 0 2 3 1 #" "
0 0 14 3 9 #"duplicate"
0 0 2 3 1 #" "
0 0 14 3 3 #"bit"
0 0 2 3 1 #" "
0 0 14 3 12 #"resolutions."
0 0 2 3 1 #" "
0           0 0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"combine-bits"
0 0 58 3 1 #" "
0 0 14 3 4 #"adc1"
0 0 58 3 1 #" "
0 0 14 3 4 #"adc2"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 58 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 8 #"string=?"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"adc-processor"
0 0 58 3 1 #" "
0 0 14 3 4 #"adc1"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"adc-processor"
0 0 58 3 1 #" "
0 0 14 3 4 #"adc2"
0 0 22 3 2 #"))"
0 0 58 29 1 #"\n"
0 0 58 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"adc-processor"
0 0 58 3 1 #" "
0 0 14 3 4 #"adc1"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 16 #"remove-duplicate"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"adc-bits"
0 0 58 3 1 #" "
0 0 14 3 4 #"adc1"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"adc-bits"
0 0 58 3 1 #" "
0 0 14 3 4 #"adc2"
0 0 22 3 5 #"))))]"
0 0 58 29 1 #"\n"
0 0 58 3 8 #"        "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 58 3 1 #" "
0 0 14 3 4 #"adc1"
0 0 22 3 3 #"]))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; test cases"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"combine-bits"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorE\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 22 3 2 #"))"
0 0 58 29 1 #"\n"
0 0 58 3 28 #"                            "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorF\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 2 #"14"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 20 3 2 #"15"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 22 3 3 #")))"
0 0 58 29 1 #"\n"
0 0 58 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorE\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 22 3 3 #")))"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"combine-bits"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorE\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 22 3 2 #"))"
0 0 58 29 1 #"\n"
0 0 58 3 28 #"                            "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorE\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 2 #"14"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 20 3 2 #"15"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 22 3 3 #")))"
0 0 58 29 1 #"\n"
0 0 58 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorE\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 58 3 1 #" "
0 0 20 3 2 #"14"
0 0 58 3 1 #" "
0 0 20 3 2 #"15"
0 0 22 3 3 #")))"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"combine-bits"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorF\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 22 3 2 #"))"
0 0 58 29 1 #"\n"
0 0 58 3 28 #"                            "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorF\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 2 #"40"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 58 3 1 #" "
0 0 20 3 2 #"56"
0 0 58 3 1 #" "
0 0 20 3 2 #"78"
0 0 58 3 1 #" "
0 0 20 3 2 #"89"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #")))"
0 0 58 29 1 #"\n"
0 0 58 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorF\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 58 3 1 #" "
0 0 20 3 2 #"40"
0 0 58 3 1 #" "
0 0 20 3 2 #"56"
0 0 58 3 1 #" "
0 0 20 3 2 #"78"
0 0 58 3 1 #" "
0 0 20 3 2 #"89"
0 0 22 3 3 #")))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 12 #";; Problem 8"
0 0 60 29 1 #"\n"
0 0 17 3 54 #";; calculate-resolution-accum: number number -> number"
0 0 60 29 1 #"\n"
0 0 17 3 76
(
 #";; consumes a bit resolution and produces the corresponding resoluti"
 #"on level"
) 0 0 60 29 1 #"\n"
0 0 17 3 23 #";; using an accumulator"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 26 #"calculate-resolution-accum"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-bit"
0 0 58 3 1 #" "
0 0 14 3 9 #"num-accum"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 58 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-bit"
0 0 58 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 26 #"calculate-resolution-accum"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-bit"
0 0 58 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 14 3 9 #"num-accum"
0 0 22 3 3 #"))]"
0 0 58 29 1 #"\n"
0 0 58 3 8 #"        "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 58 3 1 #" "
0 0 14 3 9 #"num-accum"
0 0 22 3 3 #"]))"
0 0 64 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 56 #";; resolution-producer: list-of-number -> list-of-number"
0 0 60 29 1 #"\n"
0 0 17 3 85
(
 #";; consumes the bit list of an adc and produces a list representing "
 #"resolution levels"
) 0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"resolution-producer"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 58 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 58 29 1 #"\n"
0 0 58 3 8 #"        "
0 0 22 3 2 #"[("
0 0 14 3 5 #"cons?"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 26 #"calculate-resolution-accum"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"resolution-producer"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 6 #")))]))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 36 #";; bit-levels: adc -> list-of-number"
0 0 60 29 1 #"\n"
0 0 17 3 80
(
 #";; consumes an adc and produces a list-of-number representing resolu"
 #"tion levels "
) 0 0 60 29 1 #"\n"
0 0 17 3 6 #";; the"
0 0 17 3 1 #" "
0 0 17 3 3 #"ADC"
0 0 17 3 1 #" "
0 0 17 3 23 #"is capable of producing"
0 0 60 29 1 #"\n"
0 7         163 60           0 0           0 26 0 2 3 1 #" "
0 0 14 3 1 #"A"
0 0 2 3 1 #" "
0 0 14 3 10 #"resolution"
0 0 2 3 1 #" "
0 0 14 3 5 #"level"
0 0 2 3 1 #" "
0 0 14 3 2 #"is"
0 0 2 3 1 #" "
0 0 14 3 5 #"equal"
0 0 2 3 1 #" "
0 0 14 3 2 #"to"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 2 #"to"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 5 #"power"
0 0 2 3 1 #" "
0 0 14 3 2 #"of"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 15 #"bit-resolution."
0           0 0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"bit-levels"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-adc"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 19 #"resolution-producer"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"adc-bits"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-adc"
0 0 22 3 3 #")))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; test cases"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"bit-levels"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorE\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 58 3 1 #" "
0 0 20 3 2 #"12"
0 0 22 3 3 #")))"
0 0 58 29 1 #"\n"
0 0 58 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 2 #"16"
0 0 58 3 1 #" "
0 0 20 3 3 #"256"
0 0 58 3 1 #" "
0 0 20 3 4 #"1024"
0 0 58 3 1 #" "
0 0 20 3 4 #"4096"
0 0 22 3 2 #"))"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"bit-levels"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorA\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"1"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #")))"
0 0 58 29 1 #"\n"
0 0 58 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 2 #"16"
0 0 22 3 2 #"))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 12 #";; Problem 9"
0 0 60 29 1 #"\n"
0 0 17 3 53 #";; odd-bits-remover: list-of-number -> list-of-number"
0 0 60 29 1 #"\n"
0 0 17 3 83
(
 #";; consumes a list of numbers and returns the list with all the odd "
 #"numbers removed"
) 0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"odd-bits-remover"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 58 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 58 29 1 #"\n"
0 0 58 3 8 #"        "
0 0 22 3 2 #"[("
0 0 14 3 5 #"cons?"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 9 #"         "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 58 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"modulo"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"odd-bits-remover"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 4 #")))]"
0 0 58 29 1 #"\n"
0 0 58 3 15 #"               "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"odd-bits-remover"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 7 #"))])]))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; test cases"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"odd-bits-remover"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"6"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #"))"
0 0 58 29 1 #"\n"
0 0 58 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"6"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #"))"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"odd-bits-remover"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"1"
0 0 58 3 1 #" "
0 0 20 3 1 #"3"
0 0 58 3 1 #" "
0 0 20 3 1 #"5"
0 0 58 3 1 #" "
0 0 20 3 1 #"7"
0 0 58 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 2 #"))"
0 0 58 29 1 #"\n"
0 0 58 3 14 #"              "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"odd-bits-remover"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"1"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 20 3 1 #"3"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"5"
0 0 58 3 1 #" "
0 0 20 3 1 #"6"
0 0 58 3 1 #" "
0 0 20 3 1 #"7"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 20 3 1 #"9"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #"))"
0 0 58 29 1 #"\n"
0 0 58 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"6"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 58 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #"))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 26 #";; remove-odds: adc -> adc"
0 0 60 29 1 #"\n"
0 0 17 3 67
#";; consumes an adc and returns an adc with all the odd bits removed"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"remove-odds"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-adc"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"adc-processor"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-adc"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 16 #"odd-bits-remover"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"adc-bits"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-adc"
0 0 22 3 4 #"))))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; test cases"
0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"remove-odds"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorA\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"1"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #")))"
0 0 58 29 1 #"\n"
0 0 58 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorA\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #")))"
0 0 68 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"remove-odds"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorD\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"1"
0 0 58 3 1 #" "
0 0 20 3 1 #"3"
0 0 58 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #")))"
0 0 58 29 1 #"\n"
0 0 58 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorD\""
0 0 58 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 2 #"))"
0 0 68 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"remove-odds"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorT\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 3 #")))"
0 0 58 29 1 #"\n"
0 0 58 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-adc"
0 0 58 3 1 #" "
0 0 19 3 12 #"\"processorT\""
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 58 3 1 #" "
0 0 20 3 1 #"2"
0 0 58 3 1 #" "
0 0 20 3 1 #"4"
0 0 58 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 3 #")))"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 13 #";; Problem 10"
0 0 60 29 1 #"\n"
0 0 60 29 1 #"\n"
0 0 17 3 10 #";; Part A "
0 0 60 29 1 #"\n"
0 0 17 3 53 #";; adc-value: list-of-number number -> list-of-number"
0 0 60 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 17 3 8 #"consumes"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 14 #"list-of-number"
0 0 17 3 1 #" "
0 0 17 3 12 #"representing"
0 0 17 3 1 #" "
0 0 17 3 15 #"bit-resolutions"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 1 #" "
0 0 17 3 4 #"ADC "
0 0 60 29 1 #"\n"
0 0 17 3 6 #";; and"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 1 #" "
0 0 17 3 13 #"accelerometer"
0 0 17 3 1 #" "
0 0 17 3 3 #"max"
0 0 17 3 1 #" "
0 0 17 3 6 #"output"
0 0 17 3 1 #" "
0 0 17 3 7 #"voltage"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 12 #"number); and"
0 0 17 3 1 #" "
0 0 17 3 8 #"produces"
0 0 17 3 1 #" "
0 0 17 3 2 #"a "
0 0 60 29 1 #"\n"
0 0 17 3 17 #";; list-of-number"
0 0 17 3 1 #" "
0 0 17 3 12 #"representing"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 3 #"ADC"
0 0 17 3 1 #" "
0 0 17 3 10 #"conversion"
0 0 17 3 1 #" "
0 0 17 3 6 #"result"
0 0 17 3 1 #" "
0 0 17 3 3 #"for"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 2 #"1g"
0 0 17 3 1 #" "
0 0 17 3 6 #"change"
0 0 17 3 1 #" "
0 0 17 3 2 #"on"
0 0 17 3 1 #" "
0 0 17 3 17 #"the accelerometer"
0 0 60 29 1 #"\n"
0 7         151 60           0 0           0 24 0 14 3 1 #"E"
0 0 14 3 8 #"quation:"
0 0 2 3 1 #" "
0 0 14 3 3 #"ADC"
0 0 2 3 1 #" "
0 0 14 3 6 #"Value="
0 0 2 3 1 #" "
0 0 14 3 10 #".3*2nInput"
0 0 2 3 1 #" "
0 0 14 3 7 #"Voltage"
0 0 2 3 1 #" "
0 0 14 3 5 #"Range"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"where"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 2 3 1 #" "
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 14 3 14 #"bit-resolution"
0 0 2 3 1 #" "
0 0 14 3 5 #"value"
0 0 22 3 1 #")"
0           0 0 0 60 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"adc-value"
0 0 58 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 58 3 1 #" "
0 0 14 3 11 #"max-voltage"
0 0 22 3 1 #")"
0 0 58 29 1 #"\n"
0 0 58 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 59 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 59 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 59 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 59 29 1 #"\n"
0 0 59 3 8 #"        "
0 0 22 3 2 #"[("
0 0 14 3 5 #"cons?"
0 0 59 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 59 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 59 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 59 3 1 #" "
0 0 20 3 2 #".3"
0 0 59 3 1 #" "
0 0 20 3 1 #"2"
0 0 59 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 59 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 59 3 1 #" "
0 0 14 3 11 #"max-voltage"
0 0 22 3 1 #")"
0 0 59 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"adc-value"
0 0 59 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 59 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 22 3 1 #")"
0 0 59 3 1 #" "
0 0 14 3 11 #"max-voltage"
0 0 22 3 5 #"))]))"
0 0 60 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 13 #";; test cases"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0           0
