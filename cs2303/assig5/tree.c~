#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "tree.h"

/* Function add_tnode
 * Takes in pointer to an existing node or NULL, and a value.
 * If the pointer is NULL, allocates a new node, assigns value,
 * and returns pointer to the newly-allocated node.
 * If the pointer is not NULL, compares the value to that in the node
 * pointed to, and then calls the function on child tree as appropriate.
 * If the pointer is not null, just returns 'current_node',
 * because it is the root of the subtree,
 * Returns current node in case of a duplicate value.
 * @param *current_node pointer to existing node (or NULL)
 * @param value the string to be added to the node
 * @return pointer to newly-allocated node
 */
Tnode* add_tnode(Tnode *current_node, char* value){
  if(current_node == NULL){
    current_node = (Tnode *) malloc(sizeof(Tnode));

    if(current_node != NULL){
      current_node->value = value;
      current_node->left_child = NULL_NODE; //NULL
      current_node->right_child = NULL_NODE;
      return current_node;
    }
    else{ // malloc failed!
      printf("\nMemory could not be allocated!\n");
      return (Tnode *) NULL;
    }
  }
  else {
    int cmp = strcmp(current_node->value, value); //compare the values
    if(cmp < 0)
      current_node->right_child = add_tnode(current_node->right_child, value);
    else if(cmp > 0)
      current_node->left_child = add_tnode(current_node->left_child, value);
    else{ // duplicate values
      printf("\nDuplicate value, will be discarded!");
    }
  }
  return current_node;
}

/* Function print_descending
 * traverses the tree and prints strings in descending order.
 * @param current_node pointer to current node (or NULL)
 */
void print_descending(Tnode* current_node){
  if(current_node != NULL){
    print_descending(current_node->right_child);
    printf("%s\n", current_node->value);
    print_descending(current_node->left_child);
  }
}

/*Function free_nodes
 * traverses the tree and frees all the nodes
 * @param current_node
 */
void free_nodes(Tnode* current_node){
  if(current_node != NULL){
    free_nodes(current_node->left_child);
    free_nodes(current_node->right_child);
    free(current_node);
  }
}
